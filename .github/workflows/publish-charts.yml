---
# Copyright (c) 2025 Nurol, Inc. (nurol.ai)
# This file is licensed under the Creative Commons Attribution-NonCommercial 4.0
# International License (CC BY-NC 4.0).
# For commercial use, please contact info@nurol.ai

name: Publish Helm Charts

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    tags:
      - 'nurops-event-manager-v*'
      - 'nuros-reverse-proxy-v*'
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**'

jobs:
  lint-and-test:
    runs-on: self-hosted
    env:
      HELM_HOME: /tmp/helm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Helm
        run: |
          if ! command -v helm &> /dev/null; then
            echo "Helm not found, installing..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          else
            echo "Helm version: $(helm version --short)"
          fi

      - name: Lint Charts
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Current directory: $(pwd)"
          echo "Available charts:"
          ls -la charts/

          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Linting $chart"
              helm lint "$chart"
            fi
          done

      - name: Test Charts
        run: |
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Testing $chart"
              helm template test "$chart" > /dev/null
            fi
          done

  publish:
    needs: lint-and-test
    runs-on: self-hosted
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/nurops-event-manager-v') || startsWith(github.ref, 'refs/tags/nuros-reverse-proxy-v'))
    env:
      HELM_HOME: /tmp/helm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Workflow Trigger
        run: |
          echo "Workflow triggered by:"
          echo "  Event: ${{ github.event_name }}"
          echo "  Ref: ${{ github.ref }}"
          echo "  SHA: ${{ github.sha }}"
          echo "  Actor: ${{ github.actor }}"
          echo "  Repository: ${{ github.repository }}"

          # Extract chart name and version from tag
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "  Tag: $TAG_NAME"

          if [[ "$TAG_NAME" =~ ^([a-z-]+)-v(.+)$ ]]; then
            CHART_NAME="${BASH_REMATCH[1]}"
            CHART_VERSION="${BASH_REMATCH[2]}"
            echo "  Parsed Chart: $CHART_NAME"
            echo "  Parsed Version: $CHART_VERSION"
          else
            echo "  ERROR: Tag format not recognized. Expected: chartname-vX.Y.Z"
          fi

      - name: Setup Helm
        run: |
          if ! command -v helm &> /dev/null; then
            echo "Helm not found, installing..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          else
            echo "Helm version: $(helm version --short)"
          fi

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email \
            "github-actions[bot]@users.noreply.github.com"

      - name: Checkout Pages Repository
        run: |
          git clone git@github.com:Nurol-AI/nurol-ai.github.io.git pages

      - name: Package Charts
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Current directory: $(pwd)"
          echo "Available charts:"
          ls -la charts/

          # Extract chart name and version from tag
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Processing tag: $TAG_NAME"

          if [[ "$TAG_NAME" =~ ^([a-z-]+)-v(.+)$ ]]; then
            TARGET_CHART="${BASH_REMATCH[1]}"
            TARGET_VERSION="${BASH_REMATCH[2]}"
            echo "Target chart: $TARGET_CHART"
            echo "Target version: $TARGET_VERSION"
          else
            echo "ERROR: Tag format not recognized. Expected: chartname-vX.Y.Z"
            echo "Examples: nurops-event-manager-v0.2.0, nuros-reverse-proxy-v0.2.0"
            exit 1
          fi

          # Verify the target chart exists
          if [ ! -f "charts/$TARGET_CHART/Chart.yaml" ]; then
            echo "ERROR: Chart 'charts/$TARGET_CHART/Chart.yaml' not found"
            echo "Available charts:"
            find charts/ -name "Chart.yaml" -type f
            exit 1
          fi

          mkdir -p pages/charts

          echo "Packaging only the target chart: $TARGET_CHART"
          CHART_DIR="charts/$TARGET_CHART"

          # Use the full version with 'v' prefix for the package filename
          PACKAGE_VERSION="v$TARGET_VERSION"

          # Temporarily update Chart.yaml version to match tag (without 'v' for Chart.yaml)
          echo "Updating $CHART_DIR/Chart.yaml version to $TARGET_VERSION"
          sed -i "s/^version: .*/version: $TARGET_VERSION/" "$CHART_DIR/Chart.yaml"

          # Package the specific chart with version override to include 'v' prefix
          echo "Packaging $CHART_DIR with version $PACKAGE_VERSION"
          helm package "$CHART_DIR" --destination pages/charts --version "$PACKAGE_VERSION"

          # Restore original version
          git checkout HEAD -- "$CHART_DIR/Chart.yaml"

          echo "Successfully packaged chart:"
          ls -la pages/charts/
          echo "Chart package details:"
          for pkg in pages/charts/*.tgz; do
            if [ -f "$pkg" ]; then
              echo "Package: $pkg"
              ls -la "$pkg"
            fi
          done

      - name: Update Index
        run: |
          echo "Current directory: $(pwd)"
          echo "Checking for existing index.yaml:"
          ls -la pages/charts/ || echo "charts directory not found"

          if [ -f "pages/charts/index.yaml" ]; then
            echo "Merging with existing index.yaml"
            helm repo index pages/charts \
              --url https://nurol-ai.github.io/charts \
              --merge pages/charts/index.yaml
          else
            echo "Creating new index.yaml"
            helm repo index pages/charts --url https://nurol-ai.github.io/charts
          fi

          echo "Generated index.yaml:"
          ls -la pages/charts/index.yaml || echo "index.yaml not found"

      - name: Create Repository README
        run: |
          chmod +x .github/workflows/generate-readme.sh
          .github/workflows/generate-readme.sh

      - name: Commit and Push to Pages Repository
        run: |
          cd pages

          # Extract chart info from tag for commit message
          TAG_NAME=${GITHUB_REF#refs/tags/}
          if [[ "$TAG_NAME" =~ ^([a-z-]+)-v(.+)$ ]]; then
            CHART_NAME="${BASH_REMATCH[1]}"
            CHART_VERSION="${BASH_REMATCH[2]}"
          fi

          echo "Current directory: $(pwd)"
          echo "Repository status:"
          git status
          echo "Files in pages directory:"
          ls -la
          echo "Files in charts directory:"
          ls -la charts/ || echo "charts directory not found"

          # Add all changes (including untracked files)
          git add .

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          # Commit with descriptive message
          git commit -m "Release $CHART_NAME v$CHART_VERSION

          - Published $CHART_NAME Helm chart version $CHART_VERSION
          - Updated repository index
          - Updated documentation

          Source: ${{ github.repository }}
          Tag: $TAG_NAME
          Commit: ${{ github.sha }}"

          # Push to main branch using SSH
          git remote set-url origin git@github.com:Nurol-AI/nurol-ai.github.io.git
          git push origin main

      - name: Verify Deployment
        run: |
          # Extract chart info from tag
          TAG_NAME=${GITHUB_REF#refs/tags/}
          if [[ "$TAG_NAME" =~ ^([a-z-]+)-v(.+)$ ]]; then
            CHART_NAME="${BASH_REMATCH[1]}"
            CHART_VERSION="${BASH_REMATCH[2]}"
          fi

          echo "‚úÖ Successfully published $CHART_NAME v$CHART_VERSION"
          echo ""
          echo "üì¶ Chart Details:"
          echo "  Name: $CHART_NAME"
          echo "  Version: $CHART_VERSION"
          echo "  Tag: $TAG_NAME"
          echo ""
          echo "üåê Repository URLs:"
          echo "  Repository: https://github.com/Nurol-AI/nurol-ai.github.io"
          echo "  Charts: https://nurol-ai.github.io/charts/"
          echo "  Index: https://nurol-ai.github.io/charts/index.yaml"
          echo ""
          echo "üìã Usage:"
          echo "  helm repo add nurol-charts https://nurol-ai.github.io/charts"
          echo "  helm repo update"
          echo "  helm install my-$CHART_NAME nurol-charts/$CHART_NAME --version $CHART_VERSION"
