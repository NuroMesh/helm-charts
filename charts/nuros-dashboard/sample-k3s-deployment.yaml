# Copyright (c) 2025 Nurol, Inc. (nurol.ai)
# This file is licensed under the Creative Commons Attribution-NonCommercial 4.0 International License (CC BY-NC 4.0).
# For commercial use, please contact info@nurol.ai

apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: nuros-dashboard
  namespace: kube-system
  annotations:
    helm.cattle.io/chart-url: https://nurol-ai.github.io/charts/nuros-dashboard-0.2.0.tgz
    helm.cattle.io/chart-version: "0.2.0"
spec:
  repo: https://nurol-ai.github.io/charts
  chart: nuros-dashboard
  version: "0.2.0"
  targetNamespace: nuros
  valuesContent: |-
    dashboard:
      enabled: true
      deployment:
        replicas: 2
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      image:
        repository: nuros/dashboard
        tag: "latest"
        pullPolicy: IfNotPresent
      # Environment variables for Next.js application
      env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        - name: NEXT_PUBLIC_APP_NAME
          value: "NurOS Dashboard"
        - name: NEXT_PUBLIC_API_URL
          value: "http://nuros-dashboard.nuros.svc.cluster.local"
      service:
        type: ClusterIP
        port: 80
        targetPort: 3000
      ingress:
        enabled: true
        className: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        hosts:
          - host: dashboard.nuros.local
            paths:
              - path: /
                pathType: Prefix
        tls: []
      serviceAccount:
        create: true
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop:
            - ALL
      podSecurityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nuros-dashboard
              topologyKey: kubernetes.io/hostname
---
# Alternative: Using HelmChartConfig for more advanced configuration
apiVersion: helm.cattle.io/v1
kind: HelmChartConfig
metadata:
  name: nuros-dashboard-config
  namespace: kube-system
spec:
  valuesContent: |-
    # Global configuration
    global:
      namespaceOverride: "nuros"
    
    # NurOS Dashboard specific overrides
    dashboard:
      # Enable high availability mode
      deployment:
        replicas: 3
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 256Mi
      
      # Use specific image version
      image:
        repository: nuros/dashboard
        tag: "latest"
      
      # Environment variables for production
      env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        - name: NEXT_PUBLIC_APP_NAME
          value: "NurOS Dashboard"
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.nuros.local"
      
      # Configure service for production
      service:
        type: LoadBalancer
        port: 80
        targetPort: 3000
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-type: nlb
          service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
      
      # Configure ingress for production
      ingress:
        enabled: true
        className: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
        hosts:
          - host: dashboard.nuros.com
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: nuros-dashboard-tls
            hosts:
              - dashboard.nuros.com
      
      # Security hardening
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop:
            - ALL
      
      # Pod security context
      podSecurityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      
      # Network policies
      networkPolicy:
        enabled: true
        ingress:
          - namespaceSelector:
              matchLabels:
                name: ingress-nginx
            ports:
              - protocol: TCP
                port: 3000
          - namespaceSelector:
              matchLabels:
                name: monitoring
            ports:
              - protocol: TCP
                port: 3000
        egress:
          - ports:
              - protocol: UDP
                port: 53
          - ports:
              - protocol: TCP
                port: 80
              - protocol: TCP
                port: 443
      
      # Pod annotations
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
      
      # Node placement
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
        kubernetes.io/os: linux
      
      # Tolerations for dedicated nodes
      tolerations:
        - key: "dedicated"
          operator: "Equal"
          value: "nuros-dashboard"
          effect: "NoSchedule"
      
      # Pod affinity for high availability
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - nuros-dashboard
            topologyKey: kubernetes.io/hostname
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nuros-dashboard
              topologyKey: topology.kubernetes.io/zone
      
      # Autoscaling
      autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 10
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
      
      # Pod disruption budget
      podDisruptionBudget:
        enabled: true
        minAvailable: 2
